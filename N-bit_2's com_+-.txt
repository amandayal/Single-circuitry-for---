module rc(sum, carry, a, b, cin, switch);
	input [3:0]a; 
	input [3:0]b; 
	input cin; 
	input switch;
	reg [4:0]c;
	reg [3:0]z;
	
	output [3:0]sum;
	reg [3:0]sum;
	output carry;
	reg carry;
	
	integer	i;	 
	
	always@ (a, b, cin, switch)	 
		begin 
if (switch==0)
     begin
for (i=0; i<=3; i=i+1)
	begin
	z[i]=b[i]^switch;
	end
c[0]=cin;

for (i=0; i<=3; i=i+1)   
     begin
     sum[i]=a[i]^z[i]^c[i];
     c[i+1]=(a[i]&z[i])|(z[i]&c[i])|(c[i]&a[i]);	  
     end	 
     assign carry=c[4];
     end 
else   
     begin
for (i=0; i<=3; i=i+1)
	begin
	z[i]=b[i]^switch;
	end
c[0]=cin;
for (i=0; i<=3; i=i+1)   
     begin
     sum[i]=a[i]^z[i]^c[i];
     c[i+1]=(~a[i]&z[i])|(~z[i]&c[i])|(c[i]&a[i]);	  
     end	 
     assign carry=c[4];
     end 
     end
endmodule
		
	